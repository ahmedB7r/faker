### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayLoad {
  token: String
  user: User
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Contact {
  description: String
  id: Int!
  images: [String!]!
  mainImage: String
  message: String
  name: String
  patient: User!
  phone: String
  type: ContactType!
}

type ContactConnectionPayLoad {
  count: Int
  nodes: [Contact]
}

input ContactListRelationFilter {
  every: ContactWhereInput
  none: ContactWhereInput
  some: ContactWhereInput
}

input ContactOrderByRelationAggregateInput {
  _count: SortOrder
}

input ContactOrderByWithRelationInput {
  description: SortOrder
  id: SortOrder
  images: SortOrder
  mainImage: SortOrder
  message: SortOrder
  name: SortOrder
  patient: UserOrderByWithRelationInput
  phone: SortOrder
  type: SortOrder
  userId: SortOrder
}

enum ContactType {
  FAMILY
  FRIEND
  NEIGHBOUR
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  description: StringNullableFilter
  id: IntFilter
  images: StringNullableListFilter
  mainImage: StringNullableFilter
  message: StringNullableFilter
  name: StringNullableFilter
  patient: UserWhereInput
  phone: StringNullableFilter
  type: EnumContactTypeFilter
  userId: IntFilter
}

input ContactWhereUniqueInput {
  id: Int
}

enum DAY {
  FRI
  MON
  SAT
  SUN
  THU
  TUE
  WED
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableListFilter {
  equals: [DateTime!]
  has: DateTime
  hasEvery: [DateTime!]
  hasSome: [DateTime!]
  isEmpty: Boolean
}

input EnumContactTypeFilter {
  equals: ContactType
  in: [ContactType!]
  not: NestedEnumContactTypeFilter
  notIn: [ContactType!]
}

input EnumDAYNullableListFilter {
  equals: [DAY!]
  has: DAY
  hasEvery: [DAY!]
  hasSome: [DAY!]
  isEmpty: Boolean
}

input EnumEventTypeFilter {
  equals: EventType
  in: [EventType!]
  not: NestedEnumEventTypeFilter
  notIn: [EventType!]
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumStatusFilter {
  equals: Status
  in: [Status!]
  not: NestedEnumStatusFilter
  notIn: [Status!]
}

type Event {
  days: [DAY!]!
  description: String
  eventDate: DateTime
  id: Int!
  isDone: Boolean!
  name: String
  patient: User!
  times: [DateTime!]!
  type: EventType!
}

type EventConnectionPayLoad {
  count: Int
  nodes: [Event]
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

input EventOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventOrderByWithRelationInput {
  days: SortOrder
  description: SortOrder
  eventDate: SortOrder
  id: SortOrder
  isDone: SortOrder
  lastFire: SortOrder
  name: SortOrder
  patient: UserOrderByWithRelationInput
  patientId: SortOrder
  times: SortOrder
  type: SortOrder
}

enum EventType {
  EVENT
  MEDICINE
  UPDATE
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  days: EnumDAYNullableListFilter
  description: StringNullableFilter
  eventDate: DateTimeNullableFilter
  id: IntFilter
  isDone: BoolFilter
  lastFire: DateTimeNullableFilter
  name: StringNullableFilter
  patient: UserWhereInput
  patientId: IntFilter
  times: DateTimeNullableListFilter
  type: EnumEventTypeFilter
}

input EventWhereUniqueInput {
  id: Int
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Location {
  centerLatitude: String
  centerLongitude: String
  distance: Float
  id: Int!
  latitude: String
  longitude: String
  user: User!
}

input LocationOrderByWithRelationInput {
  centerLatitude: SortOrder
  centerLongitude: SortOrder
  distance: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  centerLatitude: StringNullableFilter
  centerLongitude: StringNullableFilter
  distance: FloatNullableFilter
  id: IntFilter
  latitude: StringNullableFilter
  longitude: StringNullableFilter
  user: UserWhereInput
  userId: IntFilter
}

input LocationWhereUniqueInput {
  id: Int
  userId: Int
}

input MedicineListRelationFilter {
  every: MedicineWhereInput
  none: MedicineWhereInput
  some: MedicineWhereInput
}

input MedicineOrderByRelationAggregateInput {
  _count: SortOrder
}

input MedicineWhereInput {
  AND: [MedicineWhereInput!]
  Date: DateTimeNullableListFilter
  NOT: [MedicineWhereInput!]
  OR: [MedicineWhereInput!]
  description: StringNullableFilter
  id: IntFilter
  name: StringNullableFilter
  patient: UserWhereInput
  userId: IntFilter
}

type Mutation {
  acceptRequest(id: Int!): Request
  addContact(description: String, images: [String!]!, mainImage: String, message: String, name: String, phone: String, type: ContactType!): Contact
  addEvent(days: [DAY!], description: String, eventDate: DateTime, name: String, times: [DateTime!], type: EventType!): Event
  deleteOneContact(where: ContactWhereUniqueInput!): Contact
  deleteOneEvent(where: EventWhereUniqueInput!): Event
  deleteOneLocation(where: LocationWhereUniqueInput!): Location
  refuseRequest(id: Int!): Request
  sendRequestToBeCareGiver(email: String!): Request
  signOut: String
  signin(email: String, password: String!, phone: String): AuthPayLoad
  signup(avatar: String, email: String!, name: String, password: String!, phone: String!, role: Role!): AuthPayLoad
  updateContact(description: String, id: Int!, images: [String!]!, mainImage: String, message: String, name: String, phone: String, type: ContactType!): Contact
  updateEvent(days: [DAY!], description: String, eventDate: DateTime, id: Int!, name: String, times: [DateTime!], type: EventType!): Event
  updateLocation(centerLatitude: String, centerLongitude: String, distance: Float): Location
  updatePatientLocation(latitude: String, longitude: String): Location
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumContactTypeFilter {
  equals: ContactType
  in: [ContactType!]
  not: NestedEnumContactTypeFilter
  notIn: [ContactType!]
}

input NestedEnumEventTypeFilter {
  equals: EventType
  in: [EventType!]
  not: NestedEnumEventTypeFilter
  notIn: [EventType!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumStatusFilter {
  equals: Status
  in: [Status!]
  not: NestedEnumStatusFilter
  notIn: [Status!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(orderBy: ContactOrderByWithRelationInput, skip: Int, take: Int, where: ContactWhereInput): ContactConnectionPayLoad
  event(where: EventWhereUniqueInput!): Event
  events(orderBy: EventOrderByWithRelationInput, skip: Int, take: Int, where: EventWhereInput): EventConnectionPayLoad
  location(where: LocationWhereUniqueInput!): Location
  me: User
  patientLocation: Location
  requests(orderBy: RequestOrderByWithRelationInput, skip: Int, take: Int, where: RequestWhereInput): RequestConnectionPayLoad
}

enum QueryMode {
  default
  insensitive
}

type Request {
  id: Int!
  user: User!
}

type RequestConnectionPayLoad {
  count: Int
  nodes: [Request]
}

input RequestListRelationFilter {
  every: RequestWhereInput
  none: RequestWhereInput
  some: RequestWhereInput
}

input RequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input RequestOrderByWithRelationInput {
  id: SortOrder
  patient: UserOrderByWithRelationInput
  patientId: SortOrder
  status: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input RequestWhereInput {
  AND: [RequestWhereInput!]
  NOT: [RequestWhereInput!]
  OR: [RequestWhereInput!]
  id: IntFilter
  patient: UserWhereInput
  patientId: IntFilter
  status: EnumStatusFilter
  user: UserWhereInput
  userId: IntFilter
}

input RequestWhereUniqueInput {
  id: Int
}

enum Role {
  CARE_GIVER
  PATIENT
  RELATIVE
}

enum SortOrder {
  asc
  desc
}

enum Status {
  ACCEPTED
  PENDING
  REFUSED
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type User {
  avatar: String
  email: String!
  id: Int!
  name: String
  password: String
  phone: String
  role: Role!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  Event: EventOrderByRelationAggregateInput
  Medicine: MedicineOrderByRelationAggregateInput
  avatar: SortOrder
  beCarGiverRequests: RequestOrderByRelationAggregateInput
  carGivers: UserOrderByRelationAggregateInput
  caregiverPatient: UserOrderByWithRelationInput
  caregiverPatientId: SortOrder
  contacts: ContactOrderByRelationAggregateInput
  email: SortOrder
  id: SortOrder
  location: LocationOrderByWithRelationInput
  name: SortOrder
  password: SortOrder
  phone: SortOrder
  relativePatient: UserOrderByWithRelationInput
  relativePatientId: SortOrder
  relatives: UserOrderByRelationAggregateInput
  requests: RequestOrderByRelationAggregateInput
  role: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Event: EventListRelationFilter
  Medicine: MedicineListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  avatar: StringNullableFilter
  beCarGiverRequests: RequestListRelationFilter
  carGivers: UserListRelationFilter
  caregiverPatient: UserWhereInput
  caregiverPatientId: IntNullableFilter
  contacts: ContactListRelationFilter
  email: StringFilter
  id: IntFilter
  location: LocationWhereInput
  name: StringNullableFilter
  password: StringNullableFilter
  phone: StringNullableFilter
  relativePatient: UserWhereInput
  relativePatientId: IntNullableFilter
  relatives: UserListRelationFilter
  requests: RequestListRelationFilter
  role: EnumRoleFilter
}
