generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int        @id @default(autoincrement())
  email              String     @unique
  phone              String?    @unique
  avatar             String?
  role               Role
  password           String?
  name               String?
  caregiverPatient   User?      @relation("CareGiversToUser", fields: [caregiverPatientId], references: [id])
  caregiverPatientId Int?
  contacts           Contact[]
  Medicine           Medicine[]
  carGivers          User[]     @relation("CareGiversToUser")
  relatives          User[]     @relation("RelativesToUser")
  relativePatient    User?      @relation("RelativesToUser", fields: [relativePatientId], references: [id])
  relativePatientId  Int?
  location           Location?
  beCarGiverRequests Request[]  @relation("UserToBeCareGiver")
  requests           Request[]  @relation("CareGiverReequest")
  Event              Event[]
}

model Location {
  id              Int     @id @default(autoincrement())
  longitude       String?
  latitude        String?
  centerLongitude String?
  centerLatitude  String?
  distance        Float?
  user            User    @relation(fields: [userId], references: [id])
  userId          Int     @unique
}

model Event {
  id          Int       @id @default(autoincrement())
  isDone      Boolean   @default(false)
  type        EventType @default(UPDATE)
  description String?
  name        String?

  eventDate DateTime?
  times     DateTime[]
  days      DAY[]
  lastFire  DateTime?
  patient   User       @relation(fields: [patientId], references: [id])
  patientId Int
}

model Request {
  id     Int    @id @default(autoincrement())
  user   User   @relation("UserToBeCareGiver", fields: [userId], references: [id])
  userId Int
  status Status @default(PENDING)

  patient   User @relation("CareGiverReequest", fields: [patientId], references: [id])
  patientId Int
}

model Contact {
  id          Int         @id @default(autoincrement())
  images      String[]
  mainImage   String?
  phone       String?
  type        ContactType
  name        String?
  patient     User        @relation(fields: [userId], references: [id])
  description String?
  message     String?
  userId      Int
}

model Medicine {
  id          Int        @id @default(autoincrement())
  Date        DateTime[]
  name        String?
  patient     User       @relation(fields: [userId], references: [id])
  description String?

  userId Int
}

enum Role {

  PATIENT
  CARE_GIVER
  RELATIVE
}

enum ContactType {
  FRIEND
  FAMILY
  NEIGHBOUR
}

enum Status {
  PENDING
  ACCEPTED
  REFUSED
}

enum EventType {
  EVENT
  MEDICINE
  UPDATE
}

enum DAY {
  SAT
  SUN
  MON
  TUE
  WED
  THU
  FRI
}

// events => {
// Date,
// name,
// description,
// withWho: ['user'],
// patientId
// }
// patientDetails => {
// patientId,
// description,
// carrerjobs: [""],
// livingAddress
// }

// // if the patient exceeds the shortcut between the centerPoint to distance equal to the radius so send a notification to the careGiver
// }
